---
// Admin dashboard for viewing visitor analytics
export const prerender = false;

// Check authentication
let isAuthenticated = false;
let errorMessage = '';

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const password = formData.get('password');
  
  if (password === process.env.ADMIN_PASSWORD) {
    isAuthenticated = true;
    Astro.cookies.set('admin_auth', 'true', {
      path: '/admin',
      httpOnly: true,
      secure: false, // Set to true in production with HTTPS
      maxAge: 60 * 60 * 24 // 24 hours
    });
  } else {
    errorMessage = 'Incorrect password. Please try again.';
  }
} else {
  // Check if already authenticated via cookie
  const authCookie = Astro.cookies.get('admin_auth');
  if (authCookie && authCookie.value === 'true') {
    isAuthenticated = true;
  }
}

// Read visitor data if authenticated
let visitors = [];
let totalVisitors = 0;
let uniqueIPs = new Set();
let pageViews = 0;

if (isAuthenticated) {
  try {
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const dataDir = path.join(process.cwd(), 'data');
    const visitorsFile = path.join(dataDir, 'visitors.json');
    
    try {
      const data = await fs.readFile(visitorsFile, 'utf-8');
      visitors = JSON.parse(data);
      totalVisitors = visitors.length;
      
      // Calculate statistics
      visitors.forEach((visitor: any) => {
        uniqueIPs.add(visitor.ip);
        if (visitor.page) pageViews++;
      });
    } catch (error) {
      console.error('Error reading visitor data:', error);
      visitors = [];
    }
  } catch (error) {
    console.error('Error importing fs:', error);
  }
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - Visitor Analytics</title>
  <meta name="robots" content="noindex, nofollow">
  <!-- Version: 1.0.1 - API Debug Build -->
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f5f5f5;
      color: #333;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .header {
      background: #2563eb;
      color: white;
      padding: 20px;
      text-align: center;
    }
    .header h1 {
      margin: 0;
      font-size: 24px;
    }
    .content {
      padding: 20px;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    .stat-card {
      background: #f8fafc;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      border: 1px solid #e2e8f0;
    }
    .stat-number {
      font-size: 32px;
      font-weight: bold;
      color: #2563eb;
      margin-bottom: 8px;
    }
    .stat-label {
      color: #64748b;
      font-size: 14px;
    }
    .visitors-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .visitors-table th,
    .visitors-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e2e8f0;
    }
    .visitors-table th {
      background: #f8fafc;
      font-weight: 600;
      color: #374151;
    }
    .visitors-table tr:hover {
      background: #f9fafb;
    }
    .login-form {
      max-width: 400px;
      margin: 100px auto;
      padding: 40px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .form-group {
      margin-bottom: 20px;
    }
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #374151;
    }
    .form-group input {
      width: 100%;
      padding: 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      font-size: 16px;
      box-sizing: border-box;
    }
    .btn {
      background: #2563eb;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      width: 100%;
    }
    .btn:hover {
      background: #1d4ed8;
    }
    .error {
      color: #dc2626;
      margin-bottom: 20px;
      text-align: center;
    }
    .logout {
      text-align: right;
      margin-bottom: 20px;
    }
    .logout a {
      color: #6b7280;
      text-decoration: none;
      font-size: 14px;
    }
    .logout a:hover {
      color: #374151;
    }
    .refresh-info {
      background: #f0f9ff;
      border: 1px solid #0ea5e9;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 20px;
      color: #0369a1;
      font-size: 14px;
    }
    .last-updated {
      text-align: center;
      color: #6b7280;
      font-size: 14px;
      margin-top: 20px;
      padding: 10px;
      background: #f9fafb;
      border-radius: 6px;
    }
  </style>
</head>
<body>
  {!isAuthenticated ? (
    <div class="login-form">
      <h2 style="text-align: center; margin-bottom: 30px;">Admin Login</h2>
      {errorMessage && <div class="error">{errorMessage}</div>}
      <form method="POST">
        <div class="form-group">
          <label for="password">Password:</label>
          <input type="password" id="password" name="password" required>
        </div>
        <button type="submit" class="btn">Login</button>
      </form>
    </div>
  ) : (
    <div class="container">
      <div class="header">
        <h1>ðŸ“Š Visitor Analytics Dashboard</h1>
      </div>
      
      <div class="content">
        <div class="logout">
          <a href="/admin/logout">Logout</a>
        </div>
        
        <div class="refresh-info">
          ðŸ”„ <strong>Auto-refresh enabled:</strong> This dashboard automatically updates every 30 seconds to show the latest visitor data.
        </div>
        
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number" id="totalVisitors">{totalVisitors}</div>
            <div class="stat-label">Total Visitors</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="uniqueVisitors">{uniqueIPs.size}</div>
            <div class="stat-label">Unique IPs</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="totalPageViews">{pageViews}</div>
            <div class="stat-label">Page Views</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="lastUpdated">-</div>
            <div class="stat-label">Last Updated</div>
          </div>
        </div>
        
        <h2>Recent Visitors</h2>
        <div class="visitors-table-container">
          <table class="visitors-table">
            <thead>
              <tr>
                <th>Time</th>
                <th>IP Address</th>
                <th>Location</th>
                <th>Page</th>
                <th>Duration</th>
                <th>Referrer</th>
                <th>User Agent</th>
              </tr>
            </thead>
            <tbody id="visitorsTableBody">
              {visitors.slice(-20).reverse().map((visitor: any) => (
                <tr>
                  <td>{new Date(visitor.timestamp).toLocaleString()}</td>
                  <td>{visitor.ip}</td>
                  <td>{visitor.location?.city || 'Unknown'}, {visitor.location?.country || 'Unknown'}</td>
                  <td>{visitor.page || '/'}</td>
                  <td>{visitor.visitDuration ? `${visitor.visitDuration}s` : '-'}</td>
                  <td>{visitor.referrer === 'direct' ? 'Direct' : visitor.referrer}</td>
                  <td style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    {visitor.userAgent}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        <div class="last-updated" id="lastUpdatedInfo">
          Last updated: {new Date().toLocaleString()}
        </div>
      </div>
    </div>
  )}
  
  {isAuthenticated && (
    <script>
      // Auto-refresh functionality
      let refreshInterval: ReturnType<typeof setInterval> | undefined;
      let lastDataHash = 0;
      
      // Function to update the dashboard data
      async function updateDashboard() {
        try {
          const response = await fetch('/api/visitors-data');
          if (response.ok) {
            const data = await response.json();
            
            // Check if data has changed
            const currentHash = JSON.stringify(data).length;
            if (currentHash !== lastDataHash) {
              lastDataHash = currentHash;
              
              // Update statistics
              const totalVisitorsEl = document.getElementById('totalVisitors');
              const uniqueVisitorsEl = document.getElementById('uniqueVisitors');
              const totalPageViewsEl = document.getElementById('totalPageViews');
              
              if (totalVisitorsEl) totalVisitorsEl.textContent = data.totalVisitors;
              if (uniqueVisitorsEl) uniqueVisitorsEl.textContent = data.uniqueIPs;
              if (totalPageViewsEl) totalPageViewsEl.textContent = data.pageViews;
              
              // Update visitors table
              const tableBody = document.getElementById('visitorsTableBody');
              if (tableBody) {
                tableBody.innerHTML = data.recentVisitors.map((visitor: any) => `
                  <tr>
                    <td>${new Date(visitor.timestamp).toLocaleString()}</td>
                    <td>${visitor.ip}</td>
                    <td>${visitor.location?.city || 'Unknown'}, ${visitor.location?.country || 'Unknown'}</td>
                    <td>${visitor.page || '/'}</td>
                    <td>${visitor.visitDuration ? `${visitor.visitDuration}s` : '-'}</td>
                    <td>${visitor.referrer === 'direct' ? 'Direct' : visitor.referrer}</td>
                    <td style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                      ${visitor.userAgent}
                    </td>
                  </tr>
                `).join('');
              }
              
              // Update last updated time
              const now = new Date();
              const lastUpdatedEl = document.getElementById('lastUpdated');
              const lastUpdatedInfoEl = document.getElementById('lastUpdatedInfo');
              
              if (lastUpdatedEl) lastUpdatedEl.textContent = now.toLocaleTimeString();
              if (lastUpdatedInfoEl) lastUpdatedInfoEl.textContent = `Last updated: ${now.toLocaleString()}`;
              
              console.log('Dashboard updated successfully');
            }
          }
        } catch (error) {
          console.error('Error updating dashboard:', error);
        }
      }
      
      // Start auto-refresh when page loads
      document.addEventListener('DOMContentLoaded', function() {
        // Initial update
        updateDashboard();
        
        // Set up auto-refresh every 30 seconds
        refreshInterval = setInterval(updateDashboard, 30000);
        
        // Also update when the page becomes visible (user returns to tab)
        document.addEventListener('visibilitychange', function() {
          if (!document.hidden) {
            updateDashboard();
          }
        });
        
        console.log('Auto-refresh enabled - updating every 30 seconds');
      });
      
      // Clean up interval when page unloads
      window.addEventListener('beforeunload', function() {
        if (refreshInterval) {
          clearInterval(refreshInterval);
        }
      });
    </script>
  )}
</body>
</html>
