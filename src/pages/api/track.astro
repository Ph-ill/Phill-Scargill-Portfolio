---
// API endpoint for tracking visitors
export async function POST({ request, clientAddress }: { request: Request; clientAddress: string }) {
  try {
    console.log('Tracking API called - request received');
    
    const data = await request.json();
    const timestamp = new Date().toISOString();
    
    // Get IP address
    const ip = clientAddress || request.headers.get('x-forwarded-for') || 'unknown';
    
    // Get referrer
    const referrer = request.headers.get('referer') || 'direct';
    
    // Get user agent
    const userAgent = request.headers.get('user-agent') || 'unknown';
    
    console.log('Tracking data:', { ip, page: data.page, referrer, userAgent });
    
    // Create visitor record
    const visitorRecord: any = {
      timestamp,
      ip,
      page: data.page || '/',
      referrer,
      userAgent,
      visitDuration: data.visitDuration || 0,
      sessionId: data.sessionId || generateSessionId()
    };
    
    // Get location data (simple IP geolocation)
    try {
      const locationData = await getLocationFromIP(ip);
      visitorRecord.location = locationData;
    } catch (error) {
      visitorRecord.location = { country: 'unknown', city: 'unknown' };
    }
    
    // Save to file
    await saveVisitorData(visitorRecord);
    
    console.log('Tracking API - visitor data saved successfully');
    
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Tracking error:', error);
    return new Response(JSON.stringify({ error: 'Tracking failed' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Generate unique session ID
function generateSessionId() {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// Simple IP geolocation using ipapi.co (free tier)
async function getLocationFromIP(ip: string) {
  if (ip === 'unknown' || ip === '127.0.0.1' || ip.startsWith('192.168.') || ip.startsWith('10.')) {
    return { country: 'local', city: 'local' };
  }
  
  try {
    const response = await fetch(`https://ipapi.co/${ip}/json/`);
    const data = await response.json();
    return {
      country: data.country_name || 'unknown',
      city: data.city || 'unknown',
      region: data.region || 'unknown'
    };
  } catch (error) {
    return { country: 'unknown', city: 'unknown' };
  }
}

// Save visitor data to JSON file
async function saveVisitorData(visitorRecord: any) {
  const fs = await import('fs/promises');
  const path = await import('path');
  
  // Use the correct path for Docker container
  const dataDir = path.join(process.cwd(), 'data');
  const visitorsFile = path.join(dataDir, 'visitors.json');
  
  try {
    // Ensure data directory exists
    await fs.mkdir(dataDir, { recursive: true });
    
    // Read existing data
    let visitors = [];
    try {
      const existingData = await fs.readFile(visitorsFile, 'utf-8');
      visitors = JSON.parse(existingData);
    } catch (error) {
      // File doesn't exist or is empty, start with empty array
      visitors = [];
    }
    
    // Add new visitor record
    visitors.push(visitorRecord);
    
    // Save back to file
    await fs.writeFile(visitorsFile, JSON.stringify(visitors, null, 2));
    
    // Debug logging
    console.log(`Visitor data saved: ${visitors.length} total visitors`);
  } catch (error) {
    console.error('Error saving visitor data:', error);
    console.error('Data directory:', dataDir);
    console.error('Visitors file:', visitorsFile);
  }
}
---
