---
// This component tracks visitor behavior and sends data to the tracking API
---

<script>
  // Visitor tracking functionality
  (function() {
    'use strict';
    
    console.log('VisitorTracker: Script loaded and executing');
    
    let sessionId = localStorage.getItem('visitor_session_id');
    let pageStartTime = Date.now();
    let currentPage = window.location.pathname;
    
    console.log('VisitorTracker: Initial values:', { sessionId, currentPage, pageStartTime });
    
    // Generate session ID if none exists
    if (!sessionId) {
      sessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      localStorage.setItem('visitor_session_id', sessionId);
      console.log('VisitorTracker: Generated new session ID:', sessionId);
    }
    
    // Track page view when page loads
    function trackPageView() {
      console.log('VisitorTracker: trackPageView called');
      
      const trackingData = {
        page: currentPage,
        sessionId: sessionId,
        visitDuration: 0,
        timestamp: new Date().toISOString()
      };
      
      console.log('VisitorTracker: Sending tracking data:', trackingData);
      
      // Send tracking data
      fetch('/api/track', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(trackingData)
      })
      .then(response => {
        console.log('VisitorTracker: API response status:', response.status);
        console.log('VisitorTracker: API response headers:', response.headers);
        
        // Check if response has content
        const contentLength = response.headers.get('content-length');
        console.log('VisitorTracker: Content length:', contentLength);
        
        if (contentLength === '0' || !response.body) {
          console.log('VisitorTracker: Empty response body, skipping JSON parse');
          return { success: true, emptyResponse: true };
        }
        
        return response.json();
      })
      .then(data => {
        console.log('VisitorTracker: API response data:', data);
        if (data.success) {
          console.log('VisitorTracker: Tracking successful');
        } else {
          console.error('VisitorTracker: Tracking failed:', data.error);
        }
      })
      .catch(error => {
        // Log errors more visibly
        console.error('VisitorTracker: Tracking failed:', error);
      });
    }
    
    // Track page exit and duration
    function trackPageExit() {
      console.log('VisitorTracker: trackPageExit called');
      
      const duration = Math.round((Date.now() - pageStartTime) / 1000);
      
      const trackingData = {
        page: currentPage,
        sessionId: sessionId,
        visitDuration: duration,
        timestamp: new Date().toISOString()
      };
      
      console.log('VisitorTracker: Sending exit tracking data:', trackingData);
      
      // Send exit tracking data
      fetch('/api/track', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(trackingData)
      })
      .then(response => {
        console.log('VisitorTracker: Exit API response status:', response.status);
        return response.json();
      })
      .then(data => {
        console.log('VisitorTracker: Exit API response data:', data);
      })
      .catch(error => {
        console.error('VisitorTracker: Exit tracking failed:', error);
      });
    }
    
    // Track when user navigates away
    function handlePageHide() {
      console.log('VisitorTracker: Page hide event triggered');
      trackPageExit();
    }
    
    // Track when user closes tab/window
    function handleBeforeUnload() {
      console.log('VisitorTracker: Before unload event triggered');
      trackPageExit();
    }
    
    // Track when user navigates to different page (SPA navigation)
    function handlePopState() {
      console.log('VisitorTracker: Pop state event triggered');
      trackPageExit();
      currentPage = window.location.pathname;
      pageStartTime = Date.now();
      trackPageView();
    }
    
    // Initialize tracking
    function initTracking() {
      console.log('VisitorTracker: Initializing tracking');
      
      // Track initial page view
      trackPageView();
      
      // Set up event listeners
      window.addEventListener('pagehide', handlePageHide);
      window.addEventListener('beforeunload', handleBeforeUnload);
      window.addEventListener('popstate', handlePopState);
      
      console.log('VisitorTracker: Event listeners set up');
      
      // Track navigation for SPAs
      let currentUrl = window.location.href;
      const observer = new MutationObserver(() => {
        if (window.location.href !== currentUrl) {
          console.log('VisitorTracker: URL change detected');
          trackPageExit();
          currentUrl = window.location.href;
          currentPage = window.location.pathname;
          pageStartTime = Date.now();
          trackPageView();
        }
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      
      console.log('VisitorTracker: MutationObserver set up');
      console.log('VisitorTracker: Tracking initialization complete');
    }
    
    // Start tracking when DOM is ready
    if (document.readyState === 'loading') {
      console.log('VisitorTracker: DOM still loading, waiting for DOMContentLoaded');
      document.addEventListener('DOMContentLoaded', initTracking);
    } else {
      console.log('VisitorTracker: DOM already ready, initializing immediately');
      initTracking();
    }
  })();
</script>
